---
name: main
run-name: Build tarballs, oci and packages with test suites
on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - '*'
    tags:
      - 'v*'  # Only version tags like v1.0.0

jobs:
  build-with-smoke-test:
    if: "!contains(github.event.commits[0].message, '[skip build-with-smoke-test]')"
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Cleaning project for quick validation
        run: |
          make validate
      - name: Build Web UI with yarn including tests
        run: |
          make compile-ui
      - name: Build and assemble from source without expensive tasks
        run: |
          make
      - name: Run quick smoke test
        run: |
          make quick-smoke
      - name: Publish Quick Smoke Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Quick Smoke Test Report
      - name: Collect build logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist test results and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-with-smoke-test-logs
          path: target/artifacts/mvn.*.log
      - name: Persist tarball Core
        uses: actions/upload-artifact@v4
        with:
          name: tarball-core
          path: opennms-full-assembly/target/opennms-full-assembly-*.tar.gz
      - name: Persist tarball Minion
        uses: actions/upload-artifact@v4
        with:
          name: tarball-minion
          path: opennms-assemblies/minion/target/org.opennms.assemblies.minion-*.tar.gz
      - name: Persist tarball Sentinel
        uses: actions/upload-artifact@v4
        with:
          name: tarball-sentinel
          path: opennms-assemblies/sentinel/target/org.opennms.assemblies.sentinel-*.tar.gz

  deps-freshness:
    if: "!contains(github.event.commits[0].message, '[skip deps-freshness]')"
    runs-on: ubuntu-latest
    container:
      image: quay.io/bluebird/java-builder:ubuntu.0.1.5.jdk-17.b21
    steps:
      - uses: actions/checkout@v4
      - name: Add workspace to git safe.directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Cleaning project for quick validation
        run: |
          make libyear
      - name: Collect libyear logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist libyear results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deps-freshness
          path: |
            target/artifacts/logs/libyear.log        

  core-packages:
    if: "!contains(github.event.commits[0].message, '[skip core-packages]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    container:
      image: quay.io/bluebird/java-builder:ubuntu.0.1.5.jdk-17.b21
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tarball-core
          path: opennms-full-assembly/target
      - name: Build Core Debian packages
        run: make core-pkg-deb PKG_RELEASE=${{ github.run_number }}
      - name: Build Core RPM packages
        run: make core-pkg-rpm PKG_RELEASE=${{ github.run_number }}
      - name: Persist Core package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: core-pkgs
          path: |
            target/artifacts/packages/core

  minion-packages:
    if: "!contains(github.event.commits[0].message, '[skip minion-packages]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    container:
      image: quay.io/bluebird/java-builder:ubuntu.0.1.5.jdk-17.b21
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tarball-minion
          path: opennms-assemblies/minion/target
      - name: Build Minion Debian packages
        run: make minion-pkg-deb PKG_RELEASE=${{ github.run_number }}
      - name: Build Minion RPM packages
        run: make minion-pkg-rpm PKG_RELEASE=${{ github.run_number }}
      - name: Persist Minion package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: minion-pkgs
          path: |
            target/artifacts/packages/minion

  sentinel-packages:
    if: "!contains(github.event.commits[0].message, '[skip sentinel-packages]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    container:
      image: quay.io/bluebird/java-builder:ubuntu.0.1.5.jdk-17.b21
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: tarball-sentinel
          path: opennms-assemblies/sentinel/target
      - name: Build Sentinel Debian packages
        run: make sentinel-pkg-deb PKG_RELEASE=${{ github.run_number }}
      - name: Build Sentinel RPM packages
        run: make sentinel-pkg-rpm PKG_RELEASE=${{ github.run_number }}
      - name: Persist Sentinel package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sentinel-pkgs
          path: |
            target/artifacts/packages/sentinel

  core-oci:
    if: "!contains(github.event.commits[0].message, '[skip core-oci]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          cache-image: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: tarball-core
          path: opennms-full-assembly/target
      - name: Extract Core tarball for container build
        run: |
          mkdir -p opennms-container/core/tarball-root
          tar xzf opennms-full-assembly/target/opennms-full-assembly-*-core.tar.gz -C opennms-container/core/tarball-root
      - name: Get the release version for the OCI tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "TARGET=core" >> ${GITHUB_ENV}
          REF_NAME=${{ github.ref_name }}
          VERSION=${REF_NAME#v}  # Remove 'v' prefix
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Prepare
        run: |
          echo "OCI_REPOSITORY=${TARGET:-core-snapshot}" >> ${GITHUB_ENV}
          echo "SHORT_GIT_SHA=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}
          echo "GIT_SHA=$(git rev-parse HEAD)" >> ${GITHUB_ENV}
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> ${GITHUB_ENV}
          echo "TAG=${VERSION:-$(git rev-parse --short HEAD)}" >> ${GITHUB_ENV}
      - name: Build and push Core container image
        uses: docker/build-push-action@v5
        with:
          context: ./opennms-container/core
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RELEASE_BRANCH=${{ github.ref_name }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.TAG }}
            REVISION=${{ env.GIT_SHA }}
            SOURCE=https://github.com/Bluebird-Community/opennms/tree/${{ env.GIT_SHA }}/opennms-container/core
            BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            BUILD_JOB_ID=${{ github.run_id }}
          tags: quay.io/bluebird/${{ env.OCI_REPOSITORY }}:${{ env.TAG }},quay.io/bluebird/${{ env.OCI_REPOSITORY }}:latest

  minion-oci:
    if: "!contains(github.event.commits[0].message, '[skip minion-oci]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          cache-image: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: tarball-minion
          path: opennms-assemblies/minion/target
      - name: Extract Minion tarball for container build
        run: |
          mkdir -p opennms-container/minion/tarball-root
          tar xzf opennms-assemblies/minion/target/org.opennms.assemblies.minion-*-minion.tar.gz --strip-component 1 -C opennms-container/minion/tarball-root
      - name: Generate minion-config-schema
        working-directory: opennms-container/minion
        run: |
          cat minion-config-schema.yml.in | sed -e 's,@VERSION@,${{ github.sha }},' \
          -e 's,@REVISION@,${{ github.sha }},' \
          -e 's,@BRANCH@,${{ github.ref_name }},' \
          -e 's,@BUILD_NUMBER@,${{ github.run_id }},' > minion-config-schema.yml
      - name: Get the release version for the OCI tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "TARGET=minion" >> ${GITHUB_ENV}
          REF_NAME=${{ github.ref_name }}
          VERSION=${REF_NAME#v}  # Remove 'v' prefix
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Prepare
        run: |
          echo "OCI_REPOSITORY=${TARGET:-minion-snapshot}" >> ${GITHUB_ENV}
          echo "SHORT_GIT_SHA=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}
          echo "GIT_SHA=$(git rev-parse HEAD)" >> ${GITHUB_ENV}
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> ${GITHUB_ENV}
          echo "TAG=${VERSION:-$(git rev-parse --short HEAD)}" >> ${GITHUB_ENV}
      - name: Build and push Minion container image
        uses: docker/build-push-action@v5
        with:
          context: ./opennms-container/minion
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RELEASE_BRANCH=${{ github.ref_name }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.TAG }}
            REVISION=${{ env.GIT_SHA }}
            SOURCE=https://github.com/Bluebird-Community/opennms/tree/${{ env.GIT_SHA }}/opennms-container/minion
            BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            BUILD_JOB_ID=${{ github.run_id }}
          tags: quay.io/bluebird/${{ env.OCI_REPOSITORY }}:${{ env.TAG }},quay.io/bluebird/${{ env.OCI_REPOSITORY }}:latest

  sentinel-oci:
    if: "!contains(github.event.commits[0].message, '[skip sentinel-oci]')"
    needs:
      - integration-tests
      - e2e-tests-core
      - e2e-tests-minion
      - e2e-tests-sentinel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          cache-image: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - uses: actions/download-artifact@v4
        with:
          name: tarball-sentinel
          path: opennms-assemblies/sentinel/target
      - name: Extract Sentinel tarball for container build
        run: |
          mkdir -p opennms-container/sentinel/tarball-root
          tar xzf opennms-assemblies/sentinel/target/org.opennms.assemblies.sentinel-*-sentinel.tar.gz --strip-component 1 -C opennms-container/sentinel/tarball-root
      - name: Get the release version for the OCI tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "TARGET=sentinel" >> ${GITHUB_ENV}
          REF_NAME=${{ github.ref_name }}
          VERSION=${REF_NAME#v}  # Remove 'v' prefix
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Prepare
        run: |
          echo "OCI_REPOSITORY=${TARGET:-sentinel-snapshot}" >> ${GITHUB_ENV}
          echo "SHORT_GIT_SHA=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}
          echo "GIT_SHA=$(git rev-parse HEAD)" >> ${GITHUB_ENV}
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> ${GITHUB_ENV}
          echo "TAG=${VERSION:-$(git rev-parse --short HEAD)}" >> ${GITHUB_ENV}
      - name: Build and push Sentinel container image
        uses: docker/build-push-action@v5
        with:
          context: ./opennms-container/sentinel
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RELEASE_BRANCH=${{ github.ref_name }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.TAG }}
            REVISION=${{ env.GIT_SHA }}
            SOURCE=https://github.com/Bluebird-Community/opennms/tree/${{ env.GIT_SHA }}/opennms-container/sentinel
            BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            BUILD_JOB_ID=${{ github.run_id }}
          tags: quay.io/bluebird/${{ env.OCI_REPOSITORY }}:${{ env.TAG }},quay.io/bluebird/${{ env.OCI_REPOSITORY }}:latest

  unit-tests:
    if: "!contains(github.event.commits[0].message, '[skip unit-tests]')"
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Prepare the build for tests
        run: |
          make quick-compile
          make quick-assemble
      - name: Run unit test suite
        run: |
          make unit-tests
      - name: Publish Unit Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Unit Test Report
      - name: Collect test results and logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-artifacts
          path: |
            target/artifacts/mvn.*.log
            target/artifacts/surefire-reports
            target/artifacts/failsafe-reports

  integration-tests:
    if: "!contains(github.event.commits[0].message, '[skip integration-tests]')"
    needs:
      - unit-tests
      - build-with-smoke-test
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Prepare the build for tests and installing it
        run: |
          make quick-compile 
          make quick-assemble 
          make install-core
      - name: Run integration unit test suite
        run: |
          make integration-tests
      - name: Publish Integration Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Integration Test Report
      - name: Collect test results and logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-tests-artifacts
          path: |
            target/artifacts/mvn.*.log
            target/artifacts/surefire-reports
            target/artifacts/failsafe-reports

  e2e-tests-core:
    if: "!contains(github.event.commits[0].message, '[skip e2e-tests-core]')"
    needs:
      - unit-tests
      - build-with-smoke-test
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Build and assemble with container images
        run: |
          make quick-compile
          make quick-assemble
      - name: Run Core End-to-End tests
        run: |
          make core-e2e
      - name: Publish E2E Core Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Core E2E Test Report
      - name: Collect test results and logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist Core e2e test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-core-artifacts
          path: |
            target/artifacts/mvn.*.log
            target/artifacts/surefire-reports
            target/artifacts/failsafe-reports
            target/artifacts/recordings
            target/artifacts/smoke-test-*.tar.gz

  e2e-tests-minion:
    if: "!contains(github.event.commits[0].message, '[skip e2e-tests-minion]')"
    needs:
      - unit-tests
      - build-with-smoke-test
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Build and assemble with container images
        run: |
          make quick-compile
          make quick-assemble
      - name: Run Minion End-to-End tests
        run: |
          make minion-e2e
      - name: Publish E2E Minion Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Minion E2E Test Report
      - name: Collect test results and logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist Minion e2e test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-minion-artifacts
          path: |
            target/artifacts/mvn.*.log
            target/artifacts/surefire-reports
            target/artifacts/failsafe-reports
            target/artifacts/recordings
            target/artifacts/smoke-test-*.tar.gz

  e2e-tests-sentinel:
    if: "!contains(github.event.commits[0].message, '[skip e2e-tests-sentinel]')"
    needs:
      - unit-tests
      - build-with-smoke-test
    runs-on:
      group: Default
      labels:
        - self-hosted
        - Linux
        - X64
    steps:
      - uses: actions/checkout@v4
      - name: Build and assemble with container images
        run: |
          make quick-compile
          make quick-assemble
      - name: Run Sentinel End-to-End tests
        run: |
          make sentinel-e2e
      - name: Publish E2E Sentinel Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Sentinel E2E Test Report
      - name: Collect test results and logs
        if: always()
        run: |
          make collect-testresults
      - name: Persist Sentinel e2e test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-sentinel-artifacts
          path: |
            target/artifacts/mvn.*.log
            target/artifacts/surefire-reports
            target/artifacts/failsafe-reports
            target/artifacts/recordings
            target/artifacts/smoke-test-*.tar.gz

  publish-packages:
    needs:
      - core-packages
      - minion-packages
      - sentinel-packages
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container:
      image: quay.io/bluebird/base-builder:ubuntu.0.1.8.b19
    steps:
      - name: Set a release package repository to stable
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "TARGET=stable" >> ${GITHUB_ENV}
      - name: Set package repository
        run: |
          echo "PKG_REPOSITORY=${TARGET:-develop}" >> ${GITHUB_ENV}
      - uses: actions/download-artifact@v4
        with:
          name: core-pkgs
          path: target/artifacts/packages/core
      - uses: actions/download-artifact@v4
        with:
          name: minion-pkgs
          path: target/artifacts/packages/minion
      - uses: actions/download-artifact@v4
        with:
          name: sentinel-pkgs
          path: target/artifacts/packages/sentinel
      - name: Publish Debian packages to Cloudsmith
        shell: bash
        run: |
          export CLOUDSMITH_API_KEY=${{ secrets.CLOUDSMITH_API_KEY }}
          for deb in $(find target/artifacts/packages -name "*.deb" -type f); do
            cloudsmith push deb --republish bluebird/${{ env.PKG_REPOSITORY }}/any-distro/any-version ${deb};
          done;
      - name: Publish RPM packages to Cloudsmith
        shell: bash
        run: |
          export CLOUDSMITH_API_KEY=${{ secrets.CLOUDSMITH_API_KEY }}
          for rpm in $(find target/artifacts/packages -name "*.rpm" -type f); do
            cloudsmith push rpm --republish bluebird/${{ env.PKG_REPOSITORY }}/any-distro/any-version ${rpm};
          done;

  create-github-release:
    needs:
      - core-packages
      - minion-packages
      - sentinel-packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tarball-core
          path: opennms-full-assembly/target
      - uses: actions/download-artifact@v4
        with:
          name: tarball-minion
          path: opennms-assemblies/minion/target
      - uses: actions/download-artifact@v4
        with:
          name: tarball-sentinel
          path: opennms-assemblies/sentinel/target
      - uses: actions/download-artifact@v4
        with:
          name: core-pkgs
          path: target/artifacts/packages/core
      - uses: actions/download-artifact@v4
        with:
          name: minion-pkgs
          path: target/artifacts/packages/minion
      - uses: actions/download-artifact@v4
        with:
          name: sentinel-pkgs
          path: target/artifacts/packages/sentinel
      - name: Release ${{ github.ref_name }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            opennms-full-assembly/target/*.tar.gz
            opennms-assemblies/minion/target/*.tar.gz
            opennms-assemblies/sentinel/target/*.tar.gz
            target/artifacts/packages/core/*.deb
            target/artifacts/packages/core/*.rpm
            target/artifacts/packages/minion/*.deb
            target/artifacts/packages/minion/*.rpm
            target/artifacts/packages/sentinel/*.deb
            target/artifacts/packages/sentinel/*.rpm
